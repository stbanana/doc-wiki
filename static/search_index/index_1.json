{"/Dataflow/zh_hans/apidoc/DFlow_Init.html":{"title":"","content":" class: heading_no_counter draft: false # DFlow_Init ### source ```c uint32_t DFlow_Init(_DFlow *df, void *AllBuffer, uint32_t TBufferLen, uint32_t RBufferLen, _DFLOW_COMMON_FUNCTION *Func ); ``` 初始化 DFlow 对象，并传入各种配置参数对这个对象进行初始化。 ### 传参 > df：期望初始化的 DFlow 对象指针。 > AllBuffer：所有可供分配的内存区，用于分配Tx、Rx的Buffer。注意：内存区大小必须不小于 `TBufferLen * 2 + RBufferLen * 2`。 > TBufferLen：单个TxBuffer的长度。 > RBufferLen：单个RxBuffer的长度。 > Func：port 函数集合指针，也就是需要额外一个变量，绑定一些 port 函数，并统一绑定给 DFlow 对象。 ### 返回值 > DFLOW_API_RETURN_DEFAULT(0x00)：正常返回 > DFLOW_API_RETURN_ERR_PARAM(0x02)：传参不符合要求，例如某些必需 port 函数没有绑定"},"/Dataflow/zh_hans/apidoc/DFlow_Ticks.html":{"title":"","content":" class: heading_no_counter draft: false # DFlow_Ticks ### source ```c void DFlow_Ticks( _DFlow *df ); ``` 必须周期调用, 驱动 Dataflow 系统的关键函数。仅驱动传入的 DFlow 对象，推荐是 1ms 调用一次，也可以更短的周期进行调用，会稍微增加 CPU 的消耗，并稍微减小通道切换的延时。 ### 传参 > df：期望驱动的 DFlow 对象 ### 返回值 > 无返回"},"/Dataflow/zh_hans/apidoc/DFlow_WR_API.html":{"title":"","content":" class: heading_no_counter draft: false # 收发数据 系列API ## DFlow_Write ### source ```c uint32_t DFlow_Write(_DFlow *df, uint8_t *pcBuf, uint32_t ui32Len ); ``` 使用某个 DFlow 对象发送一段数据。实际上是推入待发送 buffer，在合适时机统一发送。 ### 传参 > df：期望发送的 DFlow 对象 > pcBuf：期望发送的数据buffer头 > ui32Len：期望发送的数据长度 ### 返回值 > DFLOW_API_RETURN_DEFAULT(0x00)：正常返回 > DFLOW_API_RETURN_BUFFER_FULL(0x20)：待发送 buffer 已满 ## DFlow_Writec ### source ```c uint32_t DFlow_Writec(_DFlow *df, uint8_t data ); ``` 使用某个 DFlow 对象发送一个字节。实际上是推入待发送 buffer，在合适时机统一发送。 ### 传参 > df：期望发送的 DFlow 对象 > data：期望发送的字节数据 ### 返回值 > DFLOW_API_RETURN_DEFAULT(0x00)：正常返回 > DFLOW_API_RETURN_BUFFER_FULL(0x20)：待发送 buffer 已满 ## DFlow_Getc ### source ```c uint32_t DFlow_Writec(_DFlow *df, uint8_t *data_rx ); ``` 从某个 DFlow 对象取一个字节。实际上从已接收 buffer 获得数据。 ### 传参 > df：期望获得数据的 DFlow 对象 > data_rx：取到的字节数据 ### 返回值 > DFLOW_API_RETURN_DEFAULT(0x00)：正常返回 > DFLOW_API_RETURN_BUFFER_EMPTY(0x21)：已接收 buffer 是空的"},"/Dataflow/zh_hans/index.html":{"title":"","content":" update: date: 2024 12 25 author: yono version: 0.1.0 content: 基础的介绍 update_open: true 建立这个库的本意是补充 [modbusX](/modbusX/zh_hans/) 在实际应用中没有照顾到的点，辅助外设驱动的开发。 总用时约 5 小时，仍有诸多不足之处。 # 作用 期望帮助那些管理不好以下两项的小白，符合任何一项都可以使用本库解决。 >传输流的 DMA。 > >传输流的半双工用法。 一个典型的应用场景是，串口的 RS485 通信。 # 副作用 >**延迟**: 会带来收发数据 1~2ms 的额外延迟，主要是确保切换半双工方向的稳定性。 > >**资源**: 会加倍 RAM 空间的消耗。"}}